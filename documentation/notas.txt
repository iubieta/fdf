--PROYECTO FDF--

Libreria grafica: MiniLibX

Entrega:
  
  - Nombre del programa: fdf
  - Archivos a entregar: Makefile, *.h, *.c
  - Normas Makefile: NAME, all, clean, fclean, re

  - Argumentos introducidos al programa: Archivo en formato .fdf

  - Funciones autorizadas:

  	- Gestion de archivos:
		- open, close, read, write

	- Gestion de memoria:
		- malloc, free

	- Gestion de errores
		-perror, strerror

	- Control del programa 
		- exit

	- Todas las funciones de la librería math 
		(-lm opción del compilador, man 3 math)

	- Todas las funciones de la librería MiniLibX

	- ft_printf y libft
  
Descripcion: Creación de un simple modelo de estructura alámbrica de un paisaje.

	Este proyecto se trata de la creación de un simple modelo de estructura alámbrica
	con una representación en 3D de un paisaje uniendo varios puntos (x, y, z) gracias a
	los segmentos de lineas (edge).

Requisitos:

  - Debes utilizar la MiniLibX.
  - Tienes que entregar un Makefile que compilará tus archivos sin hacer relink.
  - El uso de variables globales están prohibidas.

Explicacion detallada del proyecto:

	Tu programa tiene que representar el modelo en una proyección isométrica.
	Las coordenadas del paisaje están almacenadas en un archivo .fdf pasado como parámetro
	a tu programa. 
	En un archivo .fdf cada número representa un punto en el espacio:
		• La posición horizontal corresponde a su eje.
		• La posición vertical corresponde a su eje de coordenada Y.
		• El valor corresponde a su altitud.

	Aspecto grafico:
		• Tu programa tiene que mostrar la imagen en una ventana.
		• La gestión de su ventana debe permanecer fluida (cambiando de ventanas, minimizando, etc)
		• Al presionar ESC se debe cerrar la ventana y terminar el programa de forma limpia.
		• Al hacer click en la x en el marco de la ventana se debe cerrar la ventana y terminar
		el programa de forma limpia.
		• El uso de las imágenes de la MiniLibX es obligatoria

Objetivos:

	- Entender e implementar MiniLibX
	- Leer archivo .fdf (largo, ancho, altura)
	- Dibujar nube de puntos
	- Algoritmo para unir puntos con lineas
	- Vistas 3D isometrica
	- Otras vistas 3D: vista conica, rotaciones, etc.


Bibliografia:
	
	- https://medium.com/@alaricsaltzman913/fdf-42-a-detailed-walkthrough-7184cca317fc
	- https://es.stackoverflow.com/questions/492011/transformar-coordenadas-3d-a-posici%C3%B3n-2d-isom%C3%A9trica
	- https://github.com/goffauxs/fdf.git

---------------------------------------------------------------------------------------------------

1 - Gestion de errores y lectura de archivo .fdf

2 - Inicializacion GUI

3 - Imprimir pixels y lineas


	Algoritmos para dibujar lineas:

		### Algoritmo de Bresenham: Método eficiente para dibujar líneas, utiliza solo operaciones enteras.

			#### Pseudocódigo

				1. **Inicialización**:
				- Calcular la diferencia en x (`dx`) y en y (`dy`).
				- Determinar la dirección de incremento dependiendo de la posicion relativa de los puntos.
					- x1 - x0 > 0 --> x crece	||	x1 - x0 < 0 --> x decrece	(sx = desplazamiento en x)
					- y1 - y0 > 0 --> y crece	||	y1 - y0 < 0 --> y decrece	(sy = desplazamiento en y)
				- Inicializar el error (`err`) como la diferencia entre `dx` y `dy`. (cual crece mas rapido; x o y)

				2. **Dibujo de la Línea**:
				- Mientras no hayamos alcanzado el punto final:
					- Dibujar el píxel en la posición actual.
					- Calcular el doble del error (`e2`). (Para convertir posibles decimales en enteros)
					- Ajustar el error y mover el punto en la dirección x si `e2` es mayor que `-dy`.
					- Ajustar el error y mover el punto en la dirección y si `e2` es menor que `dx`.
						(Ajustar el error sirve para compensar las desviaciones de la recta al desplazarse en unico eje)
			#### Algoritmo de Bresenham:			
				```text
				1. Inicializar:
				- dx = |x1 - x0|
				- dy = |y1 - y0|
				- sx = x1 - x0
				- sy = y1 - y0 
				- err = dx - dy

				2. Mientras (x0 != x1 OR y0 != y1):
				- Dibujar píxel en (x0, y0)
				- e2 = 2 * err
				- Si (e2 > -dy): //-dy porque es el valor que se utiliza para el calculo del error inicial
					- err = err - dy
					- x0 = x0 + sx
				- Si (e2 < dx):	//dx porque es el valor que se utiliza para el calculo del error inicial
					- err = err + dx
					- y0 = y0 + sy
				```

		### Algoritmo DDA (Digital Differential Analyzer): Método para dibujar líneas, utiliza incrementos fraccionarios.

			#### Pseudocódigo de DDA

				1. **Inicialización**:
				- Calcular la diferencia en x (`dx`) y en y (`dy`).
				- Determinar el número de pasos necesarios para dibujar la línea (`steps`), que es el mayor de los valores absolutos de `dx` y `dy`.
				- Calcular los incrementos fraccionarios en x (`x_increment`) e y (`y_increment`).

				2. **Dibujo de la Línea**:
				- Iniciar en el punto `(x0, y0)`.
				- Por cada paso/incremento:
					- Dibujar el píxel en las coordenadas actuales redondeadas.
					- Incrementar x por `x_increment`.
					- Incrementar y por `y_increment`.

			#### Algoritmo DDA:

				```text
				1. Inicializar:
				- dx = x1 - x0
				- dy = y1 - y0
				- steps = max(|dx|, |dy|)
				- x_increment = dx / steps
				- y_increment = dy / steps
				- x = x0
				- y = y0

				2. Por i desde 0 hasta steps:
				- Dibujar píxel en (round(x), round(y))
				- x = x + x_increment
				- y = y + y_increment
				```

		### Resumen

		- **Algoritmo de Bresenham**:
		- Usa solo operaciones enteras.
		- Determina los píxeles a dibujar basándose en el error acumulado.
		- Eficiente y preciso para líneas diagonales.

		- **Algoritmo DDA**:
		- Usa incrementos fraccionarios.
		- Calcula los puntos por medio de un incremento fijo, dividiendo la diferencia entre los puntos inicial y final por el número de pasos (maximo de ambas).
		- Puede proporcionar una distribución más uniforme de los puntos.

4 - Vistas / proyecciones de camaras

